/*******************************************************************************
 * Copyright (c) 2010-2015, Denes Harmath, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Denes Harmath - initial API and implementation
 *******************************************************************************/
package org.eclipse.incquery.uml.derivedfeatures

import "http://www.eclipse.org/uml2/5.0.0/UML"

@Surrogate(feature = "input")
pattern actionInput(source: Action, target: InputPin)
{ AddStructuralFeatureValueAction.insertAt(source, target); } or 
{ AddVariableValueAction.insertAt(source, target); } or 
{ CallOperationAction.target(source, target); } or 
{ ClearAssociationAction.object(source, target); } or 
{ DestroyObjectAction.target(source, target); } or 
{ InvocationAction.argument(source, target); } or 
{ LinkAction.inputValue(source, target); } or 
{ OpaqueAction.inputValue(source, target); } or 
{ RaiseExceptionAction.exception(source, target); } or 
{ ReadIsClassifiedObjectAction.object(source, target); } or 
{ ReadLinkObjectEndAction.object(source, target); } or 
{ ReadLinkObjectEndQualifierAction.object(source, target); } or 
{ ReclassifyObjectAction.object(source, target); } or 
{ ReduceAction.collection(source, target); } or 
{ RemoveStructuralFeatureValueAction.removeAt(source, target); } or 
{ RemoveVariableValueAction.removeAt(source, target); } or 
{ ReplyAction.replyValue(source, target); } or 
{ ReplyAction.returnInformation(source, target); } or 
{ SendObjectAction.target(source, target); } or 
{ SendSignalAction.target(source, target); } or 
{ StartClassifierBehaviorAction.object(source, target); } or 
{ StartObjectBehaviorAction.object(source, target); } or 
{ StructuralFeatureAction.object(source, target); } or 
{ StructuredActivityNode.structuredNodeInput(source, target); } or 
{ TestIdentityAction.first(source, target); } or 
{ TestIdentityAction.second(source, target); } or 
{ UnmarshallAction.object(source, target); } or 
{ WriteStructuralFeatureAction.value(source, target); } or 
{ WriteVariableAction.value(source, target); }

@Surrogate(feature = "output")
pattern actionOutput(source: Action, target: OutputPin)
{ AcceptCallAction.returnInformation(source, target); } or 
{ AcceptEventAction.result(source, target); } or 
{ CallAction.result(source, target); } or 
{ ClearStructuralFeatureAction.result(source, target); } or 
{ CreateLinkObjectAction.result(source, target); } or 
{ CreateObjectAction.result(source, target); } or 
{ OpaqueAction.outputValue(source, target); } or 
{ ReadExtentAction.result(source, target); } or 
{ ReadIsClassifiedObjectAction.result(source, target); } or 
{ ReadLinkAction.result(source, target); } or 
{ ReadLinkObjectEndAction.result(source, target); } or 
{ ReadLinkObjectEndQualifierAction.result(source, target); } or 
{ ReadSelfAction.result(source, target); } or 
{ ReadStructuralFeatureAction.result(source, target); } or 
{ ReadVariableAction.result(source, target); } or 
{ ReduceAction.result(source, target); } or 
{ StructuredActivityNode.structuredNodeOutput(source, target); } or 
{ TestIdentityAction.result(source, target); } or 
{ UnmarshallAction.result(source, target); } or 
{ ValueSpecificationAction.result(source, target); } or 
{ WriteStructuralFeatureAction.result(source, target); }

@Surrogate(feature = "inGroup")
pattern activityEdgeInGroup(source: ActivityEdge, target: ActivityGroup)
{ ActivityEdge.inPartition(source, target); } or 
{ ActivityEdge.inStructuredNode(source, target); }

@Surrogate(feature = "containedEdge")
pattern activityGroupContainedEdge(source: ActivityGroup, target: ActivityEdge)
{ ActivityPartition.edge(source, target); } or 
{ StructuredActivityNode.edge(source, target); }

@Surrogate(feature = "containedNode")
pattern activityGroupContainedNode(source: ActivityGroup, target: ActivityNode)
{ ActivityPartition.node(source, target); } or 
{ InterruptibleActivityRegion.node(source, target); } or 
{ StructuredActivityNode.node(source, target); }

@Surrogate(feature = "subgroup")
pattern activityGroupSubgroup(source: ActivityGroup, target: ActivityGroup)
{ ActivityPartition.subpartition(source, target); }

@Surrogate(feature = "superGroup")
pattern activityGroupSuperGroup(source: ActivityGroup, target: ActivityGroup)
{ ActivityPartition.superPartition(source, target); }

@Surrogate(feature = "inGroup")
pattern activityNodeInGroup(source: ActivityNode, target: ActivityGroup)
{ ActivityNode.inInterruptibleRegion(source, target); } or 
{ ActivityNode.inPartition(source, target); } or 
{ ActivityNode.inStructuredNode(source, target); }

@Surrogate(feature = "attribute")
pattern classifierAttribute(source: Classifier, target: Property)
{ Artifact.ownedAttribute(source, target); } or 
{ Class.ownedAttribute(source, target); } or 
{ DataType.ownedAttribute(source, target); } or 
{ Interface.ownedAttribute(source, target); } or 
{ Signal.ownedAttribute(source, target); } or 
{ StructuredClassifier.ownedAttribute(source, target); }

@Surrogate(feature = "feature")
pattern classifierFeature(source: Classifier, target: Feature)
{ Artifact.ownedOperation(source, target); } or 
{ Association.ownedEnd(source, target); } or 
{ Class.ownedOperation(source, target); } or 
{ Class.ownedReception(source, target); } or 
{ find classifierAttribute(source, target); } or 
{ DataType.ownedOperation(source, target); } or 
{ Interface.ownedOperation(source, target); } or 
{ Interface.ownedReception(source, target); } or 
{ StructuredClassifier.ownedConnector(source, target); }

@Surrogate(feature = "source")
pattern directedRelationshipSource(source: DirectedRelationship, target: Element)
{ Dependency.client(source, target); } or 
{ ElementImport.importingNamespace(source, target); } or 
{ Extend.^extension(source, target); } or 
{ Generalization.specific(source, target); } or 
{ Include.includingCase(source, target); } or 
{ InformationFlow.informationSource(source, target); } or 
{ PackageImport.importingNamespace(source, target); } or 
{ PackageMerge.receivingPackage(source, target); } or 
{ ProfileApplication.applyingPackage(source, target); } or 
{ ProtocolConformance.specificMachine(source, target); } or 
{ TemplateBinding.boundElement(source, target); }

@Surrogate(feature = "target")
pattern directedRelationshipTarget(source: DirectedRelationship, target: Element)
{ Dependency.supplier(source, target); } or 
{ ElementImport.importedElement(source, target); } or 
{ Extend.extendedCase(source, target); } or 
{ Generalization.general(source, target); } or 
{ Include.addition(source, target); } or 
{ InformationFlow.informationTarget(source, target); } or 
{ PackageImport.importedPackage(source, target); } or 
{ PackageMerge.mergedPackage(source, target); } or 
{ ProfileApplication.appliedProfile(source, target); } or 
{ ProtocolConformance.generalMachine(source, target); } or 
{ TemplateBinding.signature(source, target); }

@Surrogate(feature = "ownedElement")
pattern elementOwnedElement(source: Element, target: Element)
{ Abstraction.mapping(source, target); } or 
{ AcceptEventAction.trigger(source, target); } or 
{ find actionInput(source, target); } or 
{ Action.localPostcondition(source, target); } or 
{ Action.localPrecondition(source, target); } or 
{ find actionOutput(source, target); } or 
{ ActionInputPin.fromAction(source, target); } or 
{ Activity.edge(source, target); } or 
{ ActivityEdge.guard(source, target); } or 
{ ActivityEdge.weight(source, target); } or 
{ find activityGroupSubgroup(source, target); } or 
{ Artifact.manifestation(source, target); } or 
{ BehavioredClassifier.interfaceRealization(source, target); } or 
{ ChangeEvent.changeExpression(source, target); } or 
{ Classifier.collaborationUse(source, target); } or 
{ Classifier.generalization(source, target); } or 
{ Classifier.substitution(source, target); } or 
{ CollaborationUse.roleBinding(source, target); } or 
{ CombinedFragment.cfragmentGate(source, target); } or 
{ CombinedFragment.operand(source, target); } or 
{ Component.realization(source, target); } or 
{ ConditionalNode.clause(source, target); } or 
{ Connector.end(source, target); } or 
{ Constraint.specification(source, target); } or 
{ Deployment.configuration(source, target); } or 
{ DeploymentTarget.deployment(source, target); } or 
{ Duration.expr(source, target); } or 
{ Element.ownedComment(source, target); } or 
{ ExecutableNode.handler(source, target); } or 
{ Expression.operand(source, target); } or 
{ Extend.condition(source, target); } or 
{ InstanceSpecification.slot(source, target); } or 
{ InstanceSpecification.specification(source, target); } or 
{ Interaction.action(source, target); } or 
{ InteractionConstraint.maxint(source, target); } or 
{ InteractionConstraint.minint(source, target); } or 
{ InteractionFragment.generalOrdering(source, target); } or 
{ InteractionOperand.guard(source, target); } or 
{ InteractionUse.actualGate(source, target); } or 
{ InteractionUse.argument(source, target); } or 
{ InteractionUse.returnValue(source, target); } or 
{ JoinNode.joinSpec(source, target); } or 
{ Lifeline.selector(source, target); } or 
{ LinkAction.endData(source, target); } or 
{ LinkEndData.qualifier(source, target); } or 
{ LoopNode.loopVariable(source, target); } or 
{ Message.argument(source, target); } or 
{ MultiplicityElement.lowerValue(source, target); } or 
{ MultiplicityElement.upperValue(source, target); } or 
{ NamedElement.nameExpression(source, target); } or 
{ Namespace.elementImport(source, target); } or 
{ find namespaceOwnedMember(source, target); } or 
{ Namespace.packageImport(source, target); } or 
{ ObjectNode.upperBound(source, target); } or 
{ Package.packageMerge(source, target); } or 
{ Package.profileApplication(source, target); } or 
{ Parameter.defaultValue(source, target); } or 
{ ParameterSet.condition(source, target); } or 
{ Property.defaultValue(source, target); } or 
{ Property.qualifier(source, target); } or 
{ ProtocolStateMachine.conformance(source, target); } or 
{ Slot.value(source, target); } or 
{ State.deferrableTrigger(source, target); } or 
{ State.doActivity(source, target); } or 
{ State.entry(source, target); } or 
{ State.exit(source, target); } or 
{ StateInvariant.invariant(source, target); } or 
{ Stereotype.icon(source, target); } or 
{ StringExpression.subExpression(source, target); } or 
{ StructuredActivityNode.edge(source, target); } or 
{ StructuredActivityNode.node(source, target); } or 
{ TemplateBinding.parameterSubstitution(source, target); } or 
{ TemplateParameter.ownedDefault(source, target); } or 
{ TemplateParameter.ownedParameteredElement(source, target); } or 
{ TemplateParameterSubstitution.ownedActual(source, target); } or 
{ TemplateSignature.ownedParameter(source, target); } or 
{ TemplateableElement.ownedTemplateSignature(source, target); } or 
{ TemplateableElement.templateBinding(source, target); } or 
{ TimeEvent.when(source, target); } or 
{ TimeExpression.expr(source, target); } or 
{ Transition.effect(source, target); } or 
{ Transition.trigger(source, target); } or 
{ ValuePin.value(source, target); } or 
{ ValueSpecificationAction.value(source, target); }

@Surrogate(feature = "owner")
pattern elementOwner(source: Element, target: Element)
{ ActivityEdge.activity(source, target); } or 
{ ActivityEdge.inStructuredNode(source, target); } or 
{ ActivityGroup.inActivity(source, target); } or 
{ find activityGroupSuperGroup(source, target); } or 
{ ActivityNode.activity(source, target); } or 
{ ActivityNode.inStructuredNode(source, target); } or 
{ ComponentRealization.abstraction(source, target); } or 
{ Deployment.location(source, target); } or 
{ DeploymentSpecification.deployment(source, target); } or 
{ ElementImport.importingNamespace(source, target); } or 
{ ExceptionHandler.protectedNode(source, target); } or 
{ Generalization.specific(source, target); } or 
{ InterfaceRealization.implementingClassifier(source, target); } or 
{ find namedElementNamespace(source, target); } or 
{ PackageImport.importingNamespace(source, target); } or 
{ PackageMerge.receivingPackage(source, target); } or 
{ ParameterableElement.owningTemplateParameter(source, target); } or 
{ ProfileApplication.applyingPackage(source, target); } or 
{ Property.associationEnd(source, target); } or 
{ ProtocolConformance.specificMachine(source, target); } or 
{ Slot.owningInstance(source, target); } or 
{ StringExpression.owningExpression(source, target); } or 
{ Substitution.substitutingClassifier(source, target); } or 
{ TemplateBinding.boundElement(source, target); } or 
{ TemplateParameter.signature(source, target); } or 
{ TemplateParameterSubstitution.templateBinding(source, target); } or 
{ TemplateSignature.template(source, target); }

@Surrogate(feature = "featuringClassifier")
pattern featureFeaturingClassifier(source: Feature, target: Classifier)
{ Operation.class(source, target); } or 
{ Operation.datatype(source, target); } or 
{ Operation.interface(source, target); } or 
{ Property.class(source, target); } or 
{ Property.datatype(source, target); } or 
{ Property.interface(source, target); } or 
{ Property.owningAssociation(source, target); }

@Surrogate(feature = "namespace")
pattern namedElementNamespace(source: NamedElement, target: Namespace)
{ ConnectionPointReference.state(source, target); } or 
{ Constraint.context(source, target); } or 
{ EnumerationLiteral.enumeration(source, target); } or 
{ Extend.^extension(source, target); } or 
{ ExtensionPoint.useCase(source, target); } or 
{ Include.includingCase(source, target); } or 
{ InteractionFragment.enclosingInteraction(source, target); } or 
{ InteractionFragment.enclosingOperand(source, target); } or 
{ Lifeline.interaction(source, target); } or 
{ Message.interaction(source, target); } or 
{ Operation.class(source, target); } or 
{ Operation.datatype(source, target); } or 
{ Operation.interface(source, target); } or 
{ Package.nestingPackage(source, target); } or 
{ Parameter.operation(source, target); } or 
{ Property.class(source, target); } or 
{ Property.datatype(source, target); } or 
{ Property.interface(source, target); } or 
{ Property.owningAssociation(source, target); } or 
{ Pseudostate.state(source, target); } or 
{ Pseudostate.stateMachine(source, target); } or 
{ Region.state(source, target); } or 
{ Region.stateMachine(source, target); } or 
{ Transition.container(source, target); } or 
{ Type.^package(source, target); } or 
{ Variable.activityScope(source, target); } or 
{ Variable.scope(source, target); } or 
{ Vertex.container(source, target); }

@Surrogate(feature = "member")
pattern namespaceMember(source: Namespace, target: NamedElement)
{ Association.memberEnd(source, target); } or 
{ find classifierFeature(source, target); } or 
{ find namespaceOwnedMember(source, target); } or 
{ find structuredClassifierRole(source, target); }

@Surrogate(feature = "ownedMember")
pattern namespaceOwnedMember(source: Namespace, target: NamedElement)
{ Activity.variable(source, target); } or 
{ Artifact.nestedArtifact(source, target); } or 
{ Artifact.ownedAttribute(source, target); } or 
{ Artifact.ownedOperation(source, target); } or 
{ Association.ownedEnd(source, target); } or 
{ Behavior.ownedParameter(source, target); } or 
{ Behavior.ownedParameterSet(source, target); } or 
{ BehavioralFeature.ownedParameter(source, target); } or 
{ BehavioralFeature.ownedParameterSet(source, target); } or 
{ BehavioredClassifier.ownedBehavior(source, target); } or 
{ Class.nestedClassifier(source, target); } or 
{ Class.ownedAttribute(source, target); } or 
{ Class.ownedOperation(source, target); } or 
{ Class.ownedReception(source, target); } or 
{ Classifier.ownedUseCase(source, target); } or 
{ Component.packagedElement(source, target); } or 
{ DataType.ownedAttribute(source, target); } or 
{ DataType.ownedOperation(source, target); } or 
{ Enumeration.ownedLiteral(source, target); } or 
{ Interaction.formalGate(source, target); } or 
{ Interaction.fragment(source, target); } or 
{ Interaction.lifeline(source, target); } or 
{ Interaction.message(source, target); } or 
{ InteractionOperand.fragment(source, target); } or 
{ Interface.nestedClassifier(source, target); } or 
{ Interface.ownedAttribute(source, target); } or 
{ Interface.ownedOperation(source, target); } or 
{ Interface.ownedReception(source, target); } or 
{ Interface.protocol(source, target); } or 
{ Namespace.ownedRule(source, target); } or 
{ Node.nestedNode(source, target); } or 
{ Package.packagedElement(source, target); } or 
{ Region.subvertex(source, target); } or 
{ Region.transition(source, target); } or 
{ Signal.ownedAttribute(source, target); } or 
{ State.connection(source, target); } or 
{ State.connectionPoint(source, target); } or 
{ State.region(source, target); } or 
{ StateMachine.connectionPoint(source, target); } or 
{ StateMachine.region(source, target); } or 
{ StructuredActivityNode.variable(source, target); } or 
{ StructuredClassifier.ownedAttribute(source, target); } or 
{ StructuredClassifier.ownedConnector(source, target); } or 
{ UseCase.extend(source, target); } or 
{ UseCase.extensionPoint(source, target); } or 
{ UseCase.include(source, target); }

@Surrogate(feature = "redefinedElement")
pattern redefinableElementRedefinedElement(source: RedefinableElement, target: RedefinableElement)
{ ActivityEdge.redefinedEdge(source, target); } or 
{ ActivityNode.redefinedNode(source, target); } or 
{ Classifier.redefinedClassifier(source, target); } or 
{ Connector.redefinedConnector(source, target); } or 
{ Operation.redefinedOperation(source, target); } or 
{ Property.redefinedProperty(source, target); } or 
{ RedefinableTemplateSignature.extendedSignature(source, target); } or 
{ Region.extendedRegion(source, target); } or 
{ State.redefinedState(source, target); } or 
{ Transition.redefinedTransition(source, target); }

@Surrogate(feature = "redefinitionContext")
pattern redefinableElementRedefinitionContext(source: RedefinableElement, target: Classifier)
{ Operation.class(source, target); } or 
{ Operation.datatype(source, target); } or 
{ Operation.interface(source, target); } or 
{ Property.class(source, target); } or 
{ Property.datatype(source, target); } or 
{ Property.interface(source, target); } or 
{ Property.owningAssociation(source, target); } or 
{ RedefinableTemplateSignature.classifier(source, target); }

@Surrogate(feature = "relatedElement")
pattern relationshipRelatedElement(source: Relationship, target: Element)
{ find directedRelationshipSource(source, target); } or 
{ find directedRelationshipTarget(source, target); }

@Surrogate(feature = "role")
pattern structuredClassifierRole(source: StructuredClassifier, target: ConnectableElement)
{ Collaboration.collaborationRole(source, target); } or 
{ StructuredClassifier.ownedAttribute(source, target); }


