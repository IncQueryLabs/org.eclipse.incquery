diff --git a/plugins/org.eclipse.incquery.patternlanguage.emf.ui/src/org/eclipse/incquery/patternlanguage/emf/ui/EMFPatternLanguageUiModule.java b/plugins/org.eclipse.incquery.patternlanguage.emf.ui/src/org/eclipse/incquery/patternlanguage/emf/ui/EMFPatternLanguageUiModule.java
index e797119..06a145f 100644
--- a/plugins/org.eclipse.incquery.patternlanguage.emf.ui/src/org/eclipse/incquery/patternlanguage/emf/ui/EMFPatternLanguageUiModule.java
+++ b/plugins/org.eclipse.incquery.patternlanguage.emf.ui/src/org/eclipse/incquery/patternlanguage/emf/ui/EMFPatternLanguageUiModule.java
@@ -31,6 +31,7 @@
 import org.eclipse.incquery.tooling.core.generator.types.GenModelBasedTypeProvider;
 import org.eclipse.ui.plugin.AbstractUIPlugin;
 import org.eclipse.xtext.builder.IXtextBuilderParticipant;
+import org.eclipse.xtext.common.types.access.jdt.IJavaProjectProvider;
 import org.eclipse.xtext.service.SingletonBinding;
 import org.eclipse.xtext.ui.editor.IXtextEditorCallback;
 import org.eclipse.xtext.ui.editor.contentassist.XtextContentAssistProcessor;
@@ -50,6 +51,7 @@
 /**
  * Use this class to register components to be used within the IDE.
  */
+@SuppressWarnings({ "restriction", "deprecation" })
 public class EMFPatternLanguageUiModule extends AbstractEMFPatternLanguageUiModule {
     private static final String loggerRoot = "org.eclipse.incquery";
 
@@ -143,4 +145,9 @@
     public Class<? extends IXtextEditorCallback> bindIXtextEditorCallback() {
         return EMFPatternLanguageEditorCallback.class;
     }
+    
+    @Override
+    public Class<? extends IJavaProjectProvider> bindIJavaProjectProvider() {
+        return IncQueryJavaProjectProvider.class;
+    }
 }
diff --git a/plugins/org.eclipse.incquery.patternlanguage.emf.ui/src/org/eclipse/incquery/patternlanguage/emf/ui/IncQueryJavaProjectProvider.java b/plugins/org.eclipse.incquery.patternlanguage.emf.ui/src/org/eclipse/incquery/patternlanguage/emf/ui/IncQueryJavaProjectProvider.java
new file mode 100644
index 0000000..a6e49d8
--- /dev/null
+++ b/plugins/org.eclipse.incquery.patternlanguage.emf.ui/src/org/eclipse/incquery/patternlanguage/emf/ui/IncQueryJavaProjectProvider.java
@@ -0,0 +1,45 @@
+/**
+ * Copyright (c) 2012 Eclipse contributors and others.
+ * All rights reserved.   This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+package org.eclipse.incquery.patternlanguage.emf.ui;
+
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.emf.common.util.URI;
+import org.eclipse.emf.ecore.resource.Resource;
+import org.eclipse.emf.ecore.resource.ResourceSet;
+import org.eclipse.jdt.core.IJavaProject;
+import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.xtext.common.types.xtext.ui.XtextResourceSetBasedProjectProvider;
+
+public class IncQueryJavaProjectProvider extends XtextResourceSetBasedProjectProvider {
+
+    @Override
+    public IJavaProject getJavaProject(ResourceSet resourceSet) {
+        IJavaProject result = super.getJavaProject(resourceSet);
+        if (result == null) {
+            for (Resource resource : resourceSet.getResources()) {
+                URI uri = resource.getURI();
+                if (uri.isPlatformResource()) {
+                    IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(uri.segment(1));
+                    if (project.exists()) {
+                        try {
+                            if (project.hasNature(JavaCore.NATURE_ID)) {
+                                result = JavaCore.create(project);
+                                break;
+                            }
+                        } catch (CoreException exception) {
+                            // Ignore.
+                        }
+                    }
+                }
+            }
+        }
+        return result;
+    }
+}
diff --git a/plugins/org.eclipse.incquery.patternlanguage.emf/src/org/eclipse/incquery/patternlanguage/emf/EMFPatternLanguageQualifiedNameProvider.java b/plugins/org.eclipse.incquery.patternlanguage.emf/src/org/eclipse/incquery/patternlanguage/emf/EMFPatternLanguageQualifiedNameProvider.java
index 605cf3f..365c9d6 100644
--- a/plugins/org.eclipse.incquery.patternlanguage.emf/src/org/eclipse/incquery/patternlanguage/emf/EMFPatternLanguageQualifiedNameProvider.java
+++ b/plugins/org.eclipse.incquery.patternlanguage.emf/src/org/eclipse/incquery/patternlanguage/emf/EMFPatternLanguageQualifiedNameProvider.java
@@ -11,7 +11,6 @@
 package org.eclipse.incquery.patternlanguage.emf;
 
 import org.eclipse.emf.ecore.EObject;
-import org.eclipse.incquery.patternlanguage.emf.eMFPatternLanguage.PackageImport;
 import org.eclipse.incquery.patternlanguage.naming.PatternNameProvider;
 import org.eclipse.incquery.patternlanguage.patternLanguage.Annotation;
 import org.eclipse.incquery.patternlanguage.patternLanguage.AnnotationParameter;
@@ -31,11 +30,7 @@
 
     @Override
     public QualifiedName getFullyQualifiedName(EObject obj) {
-        if (obj instanceof PackageImport) {
-            PackageImport packageImport = (PackageImport) obj;
-            String nsURI = (packageImport.getEPackage() != null) ? packageImport.getEPackage().getNsURI() : "<none>";
-            return nameConverter.toQualifiedName("import.nsUri." + nsURI);
-        } else if (obj instanceof Annotation) {
+        if (obj instanceof Annotation) {
             Annotation annotation = (Annotation) obj;
             String name = annotation.getName();
             return nameConverter.toQualifiedName("annotation." + name);
@@ -43,22 +38,6 @@
             AnnotationParameter parameter = (AnnotationParameter) obj;
             Annotation annotation = (Annotation) parameter.eContainer();
             return getFullyQualifiedName(annotation).append(parameter.getName());
-//        } else if (obj instanceof VariableReference) {
-//            VariableReference variableRef = (VariableReference) obj;
-//            QualifiedName containerName = getFullyQualifiedName(variableRef.eContainer());
-//            String name = variableRef.getVar();
-//            if (name == null) {
-//                return nameConverter.toQualifiedName("<none>");
-//            } else if (containerName == null) {
-//                return nameConverter.toQualifiedName(name);
-//            } else {
-//                return containerName.append(name);
-//            }
-//        } else if (obj instanceof Variable && obj.eContainer() instanceof Pattern) {
-//            Variable variable = (Variable) obj;
-//            Pattern pattern = (Pattern) obj.eContainer();
-//            String name = variable.getName() != null ? variable.getName() : "<none>";
-//            return getFullyQualifiedName(pattern).append(name);
         }
         return super.getFullyQualifiedName(obj);
     }
diff --git a/plugins/org.eclipse.incquery.patternlanguage.emf/src/org/eclipse/incquery/patternlanguage/emf/scoping/EMFPatternLanguageDeclarativeScopeProvider.java b/plugins/org.eclipse.incquery.patternlanguage.emf/src/org/eclipse/incquery/patternlanguage/emf/scoping/EMFPatternLanguageDeclarativeScopeProvider.java
index f1c8604..72e9597 100644
--- a/plugins/org.eclipse.incquery.patternlanguage.emf/src/org/eclipse/incquery/patternlanguage/emf/scoping/EMFPatternLanguageDeclarativeScopeProvider.java
+++ b/plugins/org.eclipse.incquery.patternlanguage.emf/src/org/eclipse/incquery/patternlanguage/emf/scoping/EMFPatternLanguageDeclarativeScopeProvider.java
@@ -67,12 +67,13 @@
 public class EMFPatternLanguageDeclarativeScopeProvider extends PatternLanguageDeclarativeScopeProvider {
     @Inject
     private IQualifiedNameConverter qualifiedNameConverter;
+    @SuppressWarnings("unused")
     @Inject
     private IMetamodelProvider metamodelProvider;
 
-    public IScope scope_EPackage(PackageImport ctx, EReference ref) {
-        return metamodelProvider.getAllMetamodelObjects(ctx);
-    }
+//    public IScope scope_EPackage(PackageImport ctx, EReference ref) {
+//        return metamodelProvider.getAllMetamodelObjects(ctx);
+//    }
 
     public IScope scope_EClassifier(PatternBody ctx, EReference ref) {
         // This is needed for content assist - in that case the ClassType does not exists
diff --git a/plugins/org.eclipse.incquery.patternlanguage.emf/src/org/eclipse/incquery/patternlanguage/emf/scoping/MetamodelProviderService.java b/plugins/org.eclipse.incquery.patternlanguage.emf/src/org/eclipse/incquery/patternlanguage/emf/scoping/MetamodelProviderService.java
index acd5676..6673a4d 100644
--- a/plugins/org.eclipse.incquery.patternlanguage.emf/src/org/eclipse/incquery/patternlanguage/emf/scoping/MetamodelProviderService.java
+++ b/plugins/org.eclipse.incquery.patternlanguage.emf/src/org/eclipse/incquery/patternlanguage/emf/scoping/MetamodelProviderService.java
@@ -78,11 +78,11 @@
         Map<String, EPackage> packageMap = Maps.newHashMap();
         Set<String> nsURISet = Sets.newHashSet(EPackage.Registry.INSTANCE.keySet());
         for (String key : nsURISet) {
-        	try {
-        		packageMap.put(key, EPackage.Registry.INSTANCE.getEPackage(key));
-        	} catch (Exception e) {
-        		logger.error(String.format("Error loading EPackage %s: %s", key, e.getMessage()));
-        	}
+            try {
+                packageMap.put(key, EPackage.Registry.INSTANCE.getEPackage(key));
+            } catch (Exception e) {
+                logger.error(String.format("Error loading EPackage %s: %s", key, e.getMessage()));
+            }
         }
         return packageMap;
 
@@ -92,26 +92,43 @@
     public EPackage loadEPackage(String packageUri, ResourceSet resourceSet) {
         if (EPackage.Registry.INSTANCE.containsKey(packageUri)) {
             return EPackage.Registry.INSTANCE.getEPackage(packageUri);
-        }
-        URI uri = null;
-        try {
-            uri = URI.createURI(packageUri);
-            if (uri.fragment() == null) {
-                Resource resource = resourceSet.getResource(uri, true);
-                return (EPackage) resource.getContents().get(0);
+        } else {
+            EPackage pack = lookUpEPackageInResourceSet(packageUri, resourceSet);
+            if (pack != null) {
+                return pack;
+            } else {
+                URI uri = null;
+                try {
+                    uri = URI.createURI(packageUri);
+                    if (uri.fragment() == null) {
+                        Resource resource = resourceSet.getResource(uri, true);
+                        return (EPackage) resource.getContents().get(0);
+                    }
+                    return (EPackage) resourceSet.getEObject(uri, true);
+                } catch (RuntimeException ex) {
+                    if (uri != null && uri.isPlatformResource()) {
+                        String platformString = uri.toPlatformString(true);
+                        URI platformPluginURI = URI.createPlatformPluginURI(platformString, true);
+                        return loadEPackage(platformPluginURI.toString(), resourceSet);
+                    }
+                    logger.trace("Cannot load package with URI '" + packageUri + "'", ex);
+                    return null;
+                }
             }
-            return (EPackage) resourceSet.getEObject(uri, true);
-        } catch (RuntimeException ex) {
-            if (uri != null && uri.isPlatformResource()) {
-                String platformString = uri.toPlatformString(true);
-                URI platformPluginURI = URI.createPlatformPluginURI(platformString, true);
-                return loadEPackage(platformPluginURI.toString(), resourceSet);
-            }
-            logger.trace("Cannot load package with URI '" + packageUri + "'", ex);
-            return null;
         }
     }
 
+    private EPackage lookUpEPackageInResourceSet(String packageUri, ResourceSet resourceSet) {
+        for (Resource resource : resourceSet.getResources()) {
+            for (EObject obj : resource.getContents()) {
+                if (obj instanceof EPackage && ((EPackage) obj).getNsURI().equals(packageUri)) {
+                    return (EPackage) obj;
+                }
+            }
+        }
+        return null;
+    }
+
     @Override
     public boolean isGeneratedCodeAvailable(EPackage ePackage, ResourceSet set) {
         return getGenmodelRegistry().findGenPackage(ePackage.getNsURI(), set) != null;