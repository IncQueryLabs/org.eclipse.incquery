package org.eclipse.incquery.uml.derivedfeatures

import "http://www.eclipse.org/uml2/5.0.0/UML"

/*
(let behavior: Behavior = self.containingBehavior() in
if behavior=null then null
else if behavior._'context' = null then behavior
else behavior._'context'
endif
endif)
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: containingBehavior
//@Surrogate(feature = "context")
//pattern actionContext(source: Action, target: Classifier) {}

/*
(memberEnd->collect(type)->asSet())
*/
@Surrogate(feature = "endType")
pattern associationEndType(
	self : Association,
	type : Type
) {
	Association.memberEnd(self, property);
	temp1 == property;
	TypedElement.type(temp1, type);
}

/*
(if nestingClass <> null then
    null
else
    let b:BehavioredClassifier = self.behavioredClassifier(self.owner) in
    if b.oclIsKindOf(Behavior) and b.oclAsType(Behavior)._'context' <> null then 
        b.oclAsType(Behavior)._'context'
    else 
        b 
    endif
endif
        )
*/
// Can't compile OCL to IncQuery because of org.eclipse.ocl.SemanticException: Unrecognized variable: (nestingClass)
//@Surrogate(feature = "context")
//pattern behaviorContext(source: Behavior, target: BehavioredClassifier) {}

/*
(Extension.allInstances()->select(ext | 
  let endTypes : Sequence(Classifier) = ext.memberEnd->collect(type.oclAsType(Classifier)) in
  endTypes->includes(self) or endTypes.allParents()->includes(self) ))
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: allParents
//@Surrogate(feature = "extension")
//pattern classExtension(source: Class, target: Extension) {}

/*
(self.general()->select(oclIsKindOf(Class))->collect(oclAsType(Class))->asSet())
*/
// Can't compile OCL to IncQuery because of org.eclipse.ocl.SemanticException: Cannot find operation (general()) for the type (Class)
//@Surrogate(feature = "superClass")
//pattern classSuperClass(source: Class, target: Class) {}

/*
(parents())
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: parents
//@Surrogate(feature = "general")
//pattern classifierGeneral(source: Classifier, target: Classifier) {}

/*
(inherit(parents()->collect(inheritableMembers(self))->asSet()))
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: parents
//@Surrogate(feature = "inheritedMember")
//pattern classifierInheritedMember(source: Classifier, target: NamedElement) {}

/*
(let 	ris : Set(Interface) = allRealizedInterfaces(),
        realizingClassifiers : Set(Classifier) =  self.realization.realizingClassifier->union(self.allParents()->collect(realization.realizingClassifier))->asSet(),
        allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents())->asSet(),
        realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(c.allRealizedInterfaces())),
        ports : Set(Port) = self.ownedPort->union(allParents()->collect(ownedPort))->asSet(),
        providedByPorts : Set(Interface) = ports.provided->asSet()
in     ris->union(realizingClassifierInterfaces) ->union(providedByPorts)->asSet())
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: allRealizedInterfaces
//@Surrogate(feature = "provided")
//pattern componentProvided(source: Component, target: Interface) {}

/*
(let 	uis : Set(Interface) = allUsedInterfaces(),
        realizingClassifiers : Set(Classifier) = self.realization.realizingClassifier->union(self.allParents()->collect(realization.realizingClassifier))->asSet(),
        allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents())->asSet(),
        realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(c.allUsedInterfaces())),
        ports : Set(Port) = self.ownedPort->union(allParents()->collect(ownedPort))->asSet(),
        usedByPorts : Set(Interface) = ports.required->asSet()
in	    uis->union(realizingClassifierInterfaces)->union(usedByPorts)->asSet()
)
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: allUsedInterfaces
//@Surrogate(feature = "required")
//pattern componentRequired(source: Component, target: Interface) {}

/*
(ConnectorEnd.allInstances()->select(role = self))
*/
@Surrogate(feature = "end")
pattern connectableElementEnd(
	self : ConnectableElement,
	temp1 : ConnectorEnd
) {
	ConnectorEnd.role(temp1, connectableElement);
	connectableElement == self;
	ConnectorEnd(connectorEnd);
	temp1 == connectorEnd;
}

/*
(if connector.type = null 
then
  null 
else
  let index : Integer = connector.end->indexOf(self) in
    connector.type.memberEnd->at(index)
endif)
*/
// Can't compile OCL to IncQuery because of org.eclipse.ocl.SemanticException: Unrecognized variable: (connector)
//@Surrogate(feature = "definingEnd")
//pattern connectorEndDefiningEnd(source: ConnectorEnd, target: Property) {}

/*
(deployment.deployedArtifact->select(oclIsKindOf(Artifact))->collect(oclAsType(Artifact).manifestation)->collect(utilizedElement)->asSet())
*/
@Surrogate(feature = "deployedElement")
pattern deploymentTargetDeployedElement(
	self : DeploymentTarget,
	packageableElement : PackageableElement
) {
	Artifact(artifact);
	temp2 == artifact;
	DeploymentTarget.deployment(self, deployment);
	temp1 == deployment;
	Deployment.deployedArtifact(temp1, deployedArtifact);
	temp2 == deployedArtifact;
	temp3 == temp2;
	Artifact.manifestation(temp3, manifestation);
	temp4 == manifestation;
	Manifestation.utilizedElement(temp4, packageableElement);
}

/*
(ownedAttribute->select(oclIsKindOf(Port))->collect(oclAsType(Port))->asOrderedSet())
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: asOrderedSet
//@Surrogate(feature = "ownedPort")
//pattern encapsulatedClassifierOwnedPort(source: EncapsulatedClassifier, target: Port) {}

/*
(ownedEnd.lowerBound() = 1)
*/
// Can't compile OCL to IncQuery because of org.eclipse.ocl.SemanticException: Cannot find operation (=(Integer)) for the type (Sequence(Integer))
//@Surrogate(feature = "isRequired")
//pattern extensionIsRequired(source: Extension, target: Boolean) {}

/*
(metaclassEnd().type.oclAsType(Class))
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: metaclassEnd
//@Surrogate(feature = "metaclass")
//pattern extensionMetaclass(source: Extension, target: Class) {}

/*
(lowerBound())
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: lowerBound
//@Surrogate(feature = "lower")
//pattern multiplicityElementLower(source: MultiplicityElement, target: Integer) {}

/*
(upperBound())
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: upperBound
//@Surrogate(feature = "upper")
//pattern multiplicityElementUpper(source: MultiplicityElement, target: UnlimitedNatural) {}

/*
(Dependency.allInstances()->select(d | d.client->includes(self)))
*/
@Surrogate(feature = "clientDependency")
pattern namedElementClientDependency(
	self : NamedElement,
	d : Dependency
) {
	Dependency.client(d, namedElement);
	namedElement == self;
	Dependency(dependency);
	d == dependency;
}

/*
(if self.name <> null and self.allNamespaces()->select( ns | ns.name=null )->isEmpty()
then 
    self.allNamespaces()->iterate( ns : Namespace; agg: String = self.name | ns.name.concat(self.separator()).concat(agg))
else
   null
endif)
*/
// Can't compile OCL to IncQuery because of java.lang.IllegalArgumentException: Unhandled parameter types: [self.allNamespaces()->iterate(ns : Namespace; agg : String = self.name | ns.name.concat(self.separator()).concat(agg))]
//@Surrogate(feature = "qualifiedName")
//pattern namedElementQualifiedName(source: NamedElement, target: String) {}

/*
(self.importMembers(elementImport.importedElement->asSet()->union(packageImport.importedPackage->collect(p | p.visibleMembers()))->asSet()))
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: visibleMembers
//@Surrogate(feature = "importedMember")
//pattern namespaceImportedMember(source: Namespace, target: PackageableElement) {}

/*
(if behavior = null then
	null
else
	behavior.ownedParameter->first()
endif)
*/
// Can't compile OCL to IncQuery because of java.lang.IllegalArgumentException: Unhandled parameter types: [null]
//@Surrogate(feature = "result")
//pattern opaqueExpressionResult(source: OpaqueExpression, target: Parameter) {}

/*
(if returnResult()->notEmpty() then returnResult()-> exists(isOrdered) else false endif)
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: returnResult
//@Surrogate(feature = "isOrdered")
//pattern operationIsOrdered(source: Operation, target: Boolean) {}

/*
(if returnResult()->notEmpty() then returnResult()->exists(isUnique) else true endif)
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: returnResult
//@Surrogate(feature = "isUnique")
//pattern operationIsUnique(source: Operation, target: Boolean) {}

/*
(if returnResult()->notEmpty() then returnResult()->any(true).lower else null endif)
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: returnResult
//@Surrogate(feature = "lower")
//pattern operationLower(source: Operation, target: Integer) {}

/*
(if returnResult()->notEmpty() then returnResult()->any(true).type else null endif)
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: returnResult
//@Surrogate(feature = "type")
//pattern operationType(source: Operation, target: Type) {}

/*
(if returnResult()->notEmpty() then returnResult()->any(true).upper else null endif)
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: returnResult
//@Surrogate(feature = "upper")
//pattern operationUpper(source: Operation, target: UnlimitedNatural) {}

/*
(if self.type = String then defaultValue.stringValue() else null endif)
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: stringValue
//@Surrogate(feature = "default")
//pattern parameterDefault(source: Parameter, target: String) {}

/*
(if isConjugated then basicRequired() else basicProvided() endif)
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: basicRequired
//@Surrogate(feature = "provided")
//pattern portProvided(source: Port, target: Interface) {}

/*
(if isConjugated then basicProvided() else basicRequired() endif)
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: basicProvided
//@Surrogate(feature = "required")
//pattern portRequired(source: Port, target: Interface) {}

/*
(if association <> null and association.memberEnd->size() = 2
then
    association.memberEnd->any(e | e <> self)
else
    null
endif)
*/
// Can't compile OCL to IncQuery because of java.lang.IllegalArgumentException: Iterator expression kind must be collect, select or reject instead of any in self.association.memberEnd->any(e : Property | e.<>(self))
//@Surrogate(feature = "opposite")
//pattern propertyOpposite(source: Property, target: Property) {}

/*
(trigger->collect(event)->select(oclIsKindOf(CallEvent))->collect(oclAsType(CallEvent).operation)->asSet())
*/
@Surrogate(feature = "referred")
pattern protocolTransitionReferred(
	self : ProtocolTransition,
	operation : Operation
) {
	CallEvent(callEvent);
	temp2 == callEvent;
	Transition.trigger(self, trigger);
	temp1 == trigger;
	Trigger.event(temp1, event);
	temp2 == event;
	temp3 == temp2;
	CallEvent.operation(temp3, operation);
}

/*
(if extendedSignature->isEmpty() then Set{} else extendedSignature.parameter->asSet() endif)
*/
// Can't compile OCL to IncQuery because of java.lang.NullPointerException
//@Surrogate(feature = "inheritedParameter")
//pattern redefinableTemplateSignatureInheritedParameter(source: RedefinableTemplateSignature, target: TemplateParameter) {}

/*
(region->size () > 1)
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: size
//@Surrogate(feature = "isOrthogonal")
//pattern stateIsOrthogonal(source: State, target: Boolean) {}

/*
((region->isEmpty()) and not isSubmachineState())
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: isSubmachineState
//@Surrogate(feature = "isSimple")
//pattern stateIsSimple(source: State, target: Boolean) {}

/*
(submachine <> null)
*/
// Can't compile OCL to IncQuery because of java.lang.IllegalArgumentException: Unhandled parameter types: [null]
//@Surrogate(feature = "isSubmachineState")
//pattern stateIsSubmachineState(source: State, target: Boolean) {}

/*
(self.containingProfile())
*/
// Can't compile OCL to IncQuery because of java.lang.UnsupportedOperationException: containingProfile
//@Surrogate(feature = "profile")
//pattern stereotypeProfile(source: Stereotype, target: Profile) {}

/*
(Transition.allInstances()->select(target=self))
*/
@Surrogate(feature = "incoming")
pattern vertexIncoming(
	self : Vertex,
	temp1 : Transition
) {
	Transition.target(temp1, vertex);
	vertex == self;
	Transition(transition);
	temp1 == transition;
}

/*
(Transition.allInstances()->select(source=self))
*/
@Surrogate(feature = "outgoing")
pattern vertexOutgoing(
	self : Vertex,
	temp1 : Transition
) {
	Transition.source(temp1, vertex);
	vertex == self;
	Transition(transition);
	temp1 == transition;
}


