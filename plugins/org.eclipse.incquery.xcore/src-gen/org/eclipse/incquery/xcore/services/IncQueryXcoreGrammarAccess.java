/*
* generated by Xtext
*/
package org.eclipse.incquery.xcore.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.emf.ecore.xcore.services.XcoreGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class IncQueryXcoreGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XIncQueryPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIncQueryPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXIncQueryPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cPackageKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cImportDirectivesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImportDirectivesXImportDirectiveParserRuleCall_4_0 = (RuleCall)cImportDirectivesAssignment_4.eContents().get(0);
		private final Assignment cImportedIncQueriesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cImportedIncQueriesXIncQueryImportParserRuleCall_5_0 = (RuleCall)cImportedIncQueriesAssignment_5.eContents().get(0);
		private final Assignment cAnnotationDirectivesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnnotationDirectivesXAnnotationDirectiveParserRuleCall_6_0 = (RuleCall)cAnnotationDirectivesAssignment_6.eContents().get(0);
		private final Assignment cClassifiersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cClassifiersXClassifierParserRuleCall_7_0 = (RuleCall)cClassifiersAssignment_7.eContents().get(0);
		
		//XIncQueryPackage:
		//	{XIncQueryPackage} annotations+=XAnnotation* "package" name=QualifiedName importDirectives+=XImportDirective*
		//	importedIncQueries+=XIncQueryImport* annotationDirectives+=XAnnotationDirective* classifiers+=XClassifier*;
		public ParserRule getRule() { return rule; }

		//{XIncQueryPackage} annotations+=XAnnotation* "package" name=QualifiedName importDirectives+=XImportDirective*
		//importedIncQueries+=XIncQueryImport* annotationDirectives+=XAnnotationDirective* classifiers+=XClassifier*
		public Group getGroup() { return cGroup; }

		//{XIncQueryPackage}
		public Action getXIncQueryPackageAction_0() { return cXIncQueryPackageAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//"package"
		public Keyword getPackageKeyword_2() { return cPackageKeyword_2; }

		//name=QualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }

		//importDirectives+=XImportDirective*
		public Assignment getImportDirectivesAssignment_4() { return cImportDirectivesAssignment_4; }

		//XImportDirective
		public RuleCall getImportDirectivesXImportDirectiveParserRuleCall_4_0() { return cImportDirectivesXImportDirectiveParserRuleCall_4_0; }

		//importedIncQueries+=XIncQueryImport*
		public Assignment getImportedIncQueriesAssignment_5() { return cImportedIncQueriesAssignment_5; }

		//XIncQueryImport
		public RuleCall getImportedIncQueriesXIncQueryImportParserRuleCall_5_0() { return cImportedIncQueriesXIncQueryImportParserRuleCall_5_0; }

		//annotationDirectives+=XAnnotationDirective*
		public Assignment getAnnotationDirectivesAssignment_6() { return cAnnotationDirectivesAssignment_6; }

		//XAnnotationDirective
		public RuleCall getAnnotationDirectivesXAnnotationDirectiveParserRuleCall_6_0() { return cAnnotationDirectivesXAnnotationDirectiveParserRuleCall_6_0; }

		//classifiers+=XClassifier*
		public Assignment getClassifiersAssignment_7() { return cClassifiersAssignment_7; }

		//XClassifier
		public RuleCall getClassifiersXClassifierParserRuleCall_7_0() { return cClassifiersXClassifierParserRuleCall_7_0; }
	}

	public class XIncQueryImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIncQueryImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportIncqueriesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedPatternModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImportedPatternModelPatternModelCrossReference_1_0 = (CrossReference)cImportedPatternModelAssignment_1.eContents().get(0);
		private final RuleCall cImportedPatternModelPatternModelSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cImportedPatternModelPatternModelCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XIncQueryImport:
		//	"import-incqueries" importedPatternModel=[patternLanguage::PatternModel|STRING] ";"?;
		public ParserRule getRule() { return rule; }

		//"import-incqueries" importedPatternModel=[patternLanguage::PatternModel|STRING] ";"?
		public Group getGroup() { return cGroup; }

		//"import-incqueries"
		public Keyword getImportIncqueriesKeyword_0() { return cImportIncqueriesKeyword_0; }

		//importedPatternModel=[patternLanguage::PatternModel|STRING]
		public Assignment getImportedPatternModelAssignment_1() { return cImportedPatternModelAssignment_1; }

		//[patternLanguage::PatternModel|STRING]
		public CrossReference getImportedPatternModelPatternModelCrossReference_1_0() { return cImportedPatternModelPatternModelCrossReference_1_0; }

		//STRING
		public RuleCall getImportedPatternModelPatternModelSTRINGTerminalRuleCall_1_0_1() { return cImportedPatternModelPatternModelSTRINGTerminalRuleCall_1_0_1; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class XMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXIncQueryDerivedFeatureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//XMember returns base::XMember:
		//	XOperation | XAttribute | XReference | XIncQueryDerivedFeature;
		public ParserRule getRule() { return rule; }

		//XOperation | XAttribute | XReference | XIncQueryDerivedFeature
		public Alternatives getAlternatives() { return cAlternatives; }

		//XOperation
		public RuleCall getXOperationParserRuleCall_0() { return cXOperationParserRuleCall_0; }

		//XAttribute
		public RuleCall getXAttributeParserRuleCall_1() { return cXAttributeParserRuleCall_1; }

		//XReference
		public RuleCall getXReferenceParserRuleCall_2() { return cXReferenceParserRuleCall_2; }

		//XIncQueryDerivedFeature
		public RuleCall getXIncQueryDerivedFeatureParserRuleCall_3() { return cXIncQueryDerivedFeatureParserRuleCall_3; }
	}

	public class XIncQueryDerivedFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIncQueryDerivedFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXIncQueryDerivedFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIncqueryDerivedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cReferenceRefersKeyword_2_0 = (Keyword)cReferenceAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeXGenericTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMultiplicityXMultiplicityParserRuleCall_4_0 = (RuleCall)cMultiplicityAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cSpecKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPatternAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cPatternPatternCrossReference_7_0 = (CrossReference)cPatternAssignment_7.eContents().get(0);
		private final RuleCall cPatternPatternQualifiedNameParserRuleCall_7_0_1 = (RuleCall)cPatternPatternCrossReference_7_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//XIncQueryDerivedFeature:
		//	{XIncQueryDerivedFeature} "incquery-derived" reference?="refers"? type=XGenericType multiplicity=XMultiplicity?
		//	name=ID "spec" pattern=[patternLanguage::Pattern|QualifiedName] ";"?;
		public ParserRule getRule() { return rule; }

		//{XIncQueryDerivedFeature} "incquery-derived" reference?="refers"? type=XGenericType multiplicity=XMultiplicity? name=ID
		//"spec" pattern=[patternLanguage::Pattern|QualifiedName] ";"?
		public Group getGroup() { return cGroup; }

		//{XIncQueryDerivedFeature}
		public Action getXIncQueryDerivedFeatureAction_0() { return cXIncQueryDerivedFeatureAction_0; }

		//"incquery-derived"
		public Keyword getIncqueryDerivedKeyword_1() { return cIncqueryDerivedKeyword_1; }

		//reference?="refers"?
		public Assignment getReferenceAssignment_2() { return cReferenceAssignment_2; }

		//"refers"
		public Keyword getReferenceRefersKeyword_2_0() { return cReferenceRefersKeyword_2_0; }

		//type=XGenericType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//XGenericType
		public RuleCall getTypeXGenericTypeParserRuleCall_3_0() { return cTypeXGenericTypeParserRuleCall_3_0; }

		//multiplicity=XMultiplicity?
		public Assignment getMultiplicityAssignment_4() { return cMultiplicityAssignment_4; }

		//XMultiplicity
		public RuleCall getMultiplicityXMultiplicityParserRuleCall_4_0() { return cMultiplicityXMultiplicityParserRuleCall_4_0; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//"spec"
		public Keyword getSpecKeyword_6() { return cSpecKeyword_6; }

		//pattern=[patternLanguage::Pattern|QualifiedName]
		public Assignment getPatternAssignment_7() { return cPatternAssignment_7; }

		//[patternLanguage::Pattern|QualifiedName]
		public CrossReference getPatternPatternCrossReference_7_0() { return cPatternPatternCrossReference_7_0; }

		//QualifiedName
		public RuleCall getPatternPatternQualifiedNameParserRuleCall_7_0_1() { return cPatternPatternQualifiedNameParserRuleCall_7_0_1; }

		//";"?
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	
	
	private XIncQueryPackageElements pXIncQueryPackage;
	private XIncQueryImportElements pXIncQueryImport;
	private XMemberElements pXMember;
	private XIncQueryDerivedFeatureElements pXIncQueryDerivedFeature;
	
	private final Grammar grammar;

	private XcoreGrammarAccess gaXcore;

	@Inject
	public IncQueryXcoreGrammarAccess(GrammarProvider grammarProvider,
		XcoreGrammarAccess gaXcore) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXcore = gaXcore;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.incquery.xcore.IncQueryXcore".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XcoreGrammarAccess getXcoreGrammarAccess() {
		return gaXcore;
	}

	
	//XIncQueryPackage:
	//	{XIncQueryPackage} annotations+=XAnnotation* "package" name=QualifiedName importDirectives+=XImportDirective*
	//	importedIncQueries+=XIncQueryImport* annotationDirectives+=XAnnotationDirective* classifiers+=XClassifier*;
	public XIncQueryPackageElements getXIncQueryPackageAccess() {
		return (pXIncQueryPackage != null) ? pXIncQueryPackage : (pXIncQueryPackage = new XIncQueryPackageElements());
	}
	
	public ParserRule getXIncQueryPackageRule() {
		return getXIncQueryPackageAccess().getRule();
	}

	//XIncQueryImport:
	//	"import-incqueries" importedPatternModel=[patternLanguage::PatternModel|STRING] ";"?;
	public XIncQueryImportElements getXIncQueryImportAccess() {
		return (pXIncQueryImport != null) ? pXIncQueryImport : (pXIncQueryImport = new XIncQueryImportElements());
	}
	
	public ParserRule getXIncQueryImportRule() {
		return getXIncQueryImportAccess().getRule();
	}

	//XMember returns base::XMember:
	//	XOperation | XAttribute | XReference | XIncQueryDerivedFeature;
	public XMemberElements getXMemberAccess() {
		return (pXMember != null) ? pXMember : (pXMember = new XMemberElements());
	}
	
	public ParserRule getXMemberRule() {
		return getXMemberAccess().getRule();
	}

	//XIncQueryDerivedFeature:
	//	{XIncQueryDerivedFeature} "incquery-derived" reference?="refers"? type=XGenericType multiplicity=XMultiplicity?
	//	name=ID "spec" pattern=[patternLanguage::Pattern|QualifiedName] ";"?;
	public XIncQueryDerivedFeatureElements getXIncQueryDerivedFeatureAccess() {
		return (pXIncQueryDerivedFeature != null) ? pXIncQueryDerivedFeature : (pXIncQueryDerivedFeature = new XIncQueryDerivedFeatureElements());
	}
	
	public ParserRule getXIncQueryDerivedFeatureRule() {
		return getXIncQueryDerivedFeatureAccess().getRule();
	}

	//XPackage:
	//	{XPackage} annotations+=XAnnotation* "package" name=QualifiedName importDirectives+=XImportDirective*
	//	annotationDirectives+=XAnnotationDirective* classifiers+=XClassifier*;
	public XcoreGrammarAccess.XPackageElements getXPackageAccess() {
		return gaXcore.getXPackageAccess();
	}
	
	public ParserRule getXPackageRule() {
		return getXPackageAccess().getRule();
	}

	//XAnnotation:
	//	"@" source=[XAnnotationDirective|XQualifiedName] ("(" details+=XStringToStringMapEntry (","
	//	details+=XStringToStringMapEntry)* ")")?;
	public XcoreGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXcore.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XStringToStringMapEntry:
	//	key=QualifiedName "=" value=STRING;
	public XcoreGrammarAccess.XStringToStringMapEntryElements getXStringToStringMapEntryAccess() {
		return gaXcore.getXStringToStringMapEntryAccess();
	}
	
	public ParserRule getXStringToStringMapEntryRule() {
		return getXStringToStringMapEntryAccess().getRule();
	}

	//XImportDirective:
	//	"import" (importedNamespace=QualifiedNameWithWildcard | importedObject=[EObject|QualifiedName]);
	public XcoreGrammarAccess.XImportDirectiveElements getXImportDirectiveAccess() {
		return gaXcore.getXImportDirectiveAccess();
	}
	
	public ParserRule getXImportDirectiveRule() {
		return getXImportDirectiveAccess().getRule();
	}

	//XAnnotationDirective:
	//	=> ("annotation" sourceURI=STRING) "as" name=ValidID;
	public XcoreGrammarAccess.XAnnotationDirectiveElements getXAnnotationDirectiveAccess() {
		return gaXcore.getXAnnotationDirectiveAccess();
	}
	
	public ParserRule getXAnnotationDirectiveRule() {
		return getXAnnotationDirectiveAccess().getRule();
	}

	//XClassifier:
	//	XClass | XDataType | XEnum;
	public XcoreGrammarAccess.XClassifierElements getXClassifierAccess() {
		return gaXcore.getXClassifierAccess();
	}
	
	public ParserRule getXClassifierRule() {
		return getXClassifierAccess().getRule();
	}

	//XDataType:
	//	annotations+=XAnnotation* "type" name=ID ("<" typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)*
	//	">")? "wraps" instanceType=JvmTypeReference ((serializable?="create" createBody=XBlockExpression)? / *
	//	   * In scope for create should be what's visible in XyzFactoryImpl and 'this' will denote the literal value.
	//	   * The block expression must yield null or an instance of the wrapped type.
	//	   * / / *
	//	   * In scope for create should be what's visible in XyzFactoryImpl
	//	   * and 'this' will denote an instance of the wrapped type.
	//	   * The block expression must yield a java.lang.String.
	//	   * / & ("convert" convertBody=XBlockExpression)?);
	public XcoreGrammarAccess.XDataTypeElements getXDataTypeAccess() {
		return gaXcore.getXDataTypeAccess();
	}
	
	public ParserRule getXDataTypeRule() {
		return getXDataTypeAccess().getRule();
	}

	//XEnum:
	//	annotations+=XAnnotation* "enum" name=ID "{" (literals+=XEnumLiteral (","? literals+=XEnumLiteral)*)? "}";
	public XcoreGrammarAccess.XEnumElements getXEnumAccess() {
		return gaXcore.getXEnumAccess();
	}
	
	public ParserRule getXEnumRule() {
		return getXEnumAccess().getRule();
	}

	//XEnumLiteral:
	//	annotations+=XAnnotation* name=ID ("as" literal=STRING)? ("=" value=SignedInt)?;
	public XcoreGrammarAccess.XEnumLiteralElements getXEnumLiteralAccess() {
		return gaXcore.getXEnumLiteralAccess();
	}
	
	public ParserRule getXEnumLiteralRule() {
		return getXEnumLiteralAccess().getRule();
	}

	//SignedInt returns EInt:
	//	"-"? INT;
	public XcoreGrammarAccess.SignedIntElements getSignedIntAccess() {
		return gaXcore.getSignedIntAccess();
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//XClass:
	//	{XClass} annotations+=XAnnotation* (abstract?="abstract"? "class" | interface?="interface") name=ID ("<"
	//	typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")? ("extends" superTypes+=XGenericType (","
	//	superTypes+=XGenericType)*)? ("wraps" instanceType=JvmTypeReference)? "{" members+=XMember* "}";
	public XcoreGrammarAccess.XClassElements getXClassAccess() {
		return gaXcore.getXClassAccess();
	}
	
	public ParserRule getXClassRule() {
		return getXClassAccess().getRule();
	}

	//XAttribute:
	//	{XAttribute} annotations+=XAnnotation* (unordered?="unordered"? & unique?="unique"? & readonly?="readonly"? &
	//	transient?="transient"? & volatile?="volatile"? & unsettable?="unsettable"? & derived?="derived"? & iD?="id"?)
	//	type=XGenericType multiplicity=XMultiplicity? name=ID ("=" defaultValueLiteral=STRING)? / *
	//	 * In scope for getBody should be what's visible in AbcImpl
	//	 * and 'this' will denote an instance of the feature's type.
	//	 * The block expression must yield a value of the feature's type.
	//	 * / (("get" getBody=XBlockExpression)? & ("set" setBody=XBlockExpression)? & ("isSet" isSetBody=XBlockExpression)? &
	//	("unset" unsetBody=XBlockExpression)?);
	public XcoreGrammarAccess.XAttributeElements getXAttributeAccess() {
		return gaXcore.getXAttributeAccess();
	}
	
	public ParserRule getXAttributeRule() {
		return getXAttributeAccess().getRule();
	}

	//XReference:
	//	{XReference} annotations+=XAnnotation* (containment?="contains" resolveProxies?="resolving"? |
	//	resolveProxies?="resolving" containment?="contains" | container?="container" resolveProxies?="resolving"? |
	//	resolveProxies?="resolving" container?="container" | "refers" local?="local"? | local?="local" "refers")
	//	(unordered?="unordered"? & unique?="unique"? & readonly?="readonly"? & transient?="transient"? & volatile?="volatile"?
	//	& unsettable?="unsettable"? & derived?="derived"?) type=XGenericType multiplicity=XMultiplicity? name=ID ("opposite"
	//	opposite=[genmodel::GenFeature|ValidID])? ("keys" keys+=[genmodel::GenFeature|ValidID] (","
	//	keys+=[genmodel::GenFeature|ValidID])*)? / *
	//	 * In scope for getBody should be what's visible in AbcImpl
	//	 * and 'this' will denote an instance of the feature's type.
	//	 * The block expression must yield a value of the feature's type.
	//	 * / (("get" getBody=XBlockExpression)? & ("set" setBody=XBlockExpression)? & ("isSet" isSetBody=XBlockExpression)? &
	//	("unset" unsetBody=XBlockExpression)?);
	public XcoreGrammarAccess.XReferenceElements getXReferenceAccess() {
		return gaXcore.getXReferenceAccess();
	}
	
	public ParserRule getXReferenceRule() {
		return getXReferenceAccess().getRule();
	}

	//XOperation:
	//	{XOperation} annotations+=XAnnotation* "op" (unordered?="unordered" unique?="unique"? | unique?="unique"
	//	unordered?="unordered"?)? ("<" typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")?
	//	(type=XGenericType | "void") multiplicity=XMultiplicity? name=ID "(" (parameters+=XParameter (","
	//	parameters+=XParameter)*)? ")" ("throws" exceptions+=XGenericType ("," exceptions+=XGenericType)*)? / *
	//	 * This is the logic for the operation.
	//	 * How are we going to resolve all references that are in scope for Xbase language?
	//	 * Will things like variables that are actually there in generated in the Impl class be accessible directly?
	//	 * / body=XBlockExpression?;
	public XcoreGrammarAccess.XOperationElements getXOperationAccess() {
		return gaXcore.getXOperationAccess();
	}
	
	public ParserRule getXOperationRule() {
		return getXOperationAccess().getRule();
	}

	//XParameter:
	//	annotations+=XAnnotation* (unordered?="unordered" unique?="unique"? | unique?="unique" unordered?="unordered"?)?
	//	type=XGenericType multiplicity=XMultiplicity? name=ID;
	public XcoreGrammarAccess.XParameterElements getXParameterAccess() {
		return gaXcore.getXParameterAccess();
	}
	
	public ParserRule getXParameterRule() {
		return getXParameterAccess().getRule();
	}

	//XTypeParameter:
	//	annotations+=XAnnotation* name=ID ("extends" bounds+=XGenericType ("&" bounds+=XGenericType)*)?;
	public XcoreGrammarAccess.XTypeParameterElements getXTypeParameterAccess() {
		return gaXcore.getXTypeParameterAccess();
	}
	
	public ParserRule getXTypeParameterRule() {
		return getXTypeParameterAccess().getRule();
	}

	//XMultiplicity:
	//	"[" ("?" | "*" | "+" | INT (".." (INT | "?" | "*"))?)? "]";
	public XcoreGrammarAccess.XMultiplicityElements getXMultiplicityAccess() {
		return gaXcore.getXMultiplicityAccess();
	}
	
	public ParserRule getXMultiplicityRule() {
		return getXMultiplicityAccess().getRule();
	}

	//XBlockExpression returns xbase::XBlockExpression:
	//	{xbase::XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XcoreGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXcore.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XGenericType:
	//	type=[genmodel::GenBase|XQualifiedName] ("<" typeArguments+=XGenericTypeArgument (","
	//	typeArguments+=XGenericTypeArgument)* ">")?;
	public XcoreGrammarAccess.XGenericTypeElements getXGenericTypeAccess() {
		return gaXcore.getXGenericTypeAccess();
	}
	
	public ParserRule getXGenericTypeRule() {
		return getXGenericTypeAccess().getRule();
	}

	//XGenericTypeArgument returns XGenericType:
	//	XGenericType | XGenericWildcardTypeArgument;
	public XcoreGrammarAccess.XGenericTypeArgumentElements getXGenericTypeArgumentAccess() {
		return gaXcore.getXGenericTypeArgumentAccess();
	}
	
	public ParserRule getXGenericTypeArgumentRule() {
		return getXGenericTypeArgumentAccess().getRule();
	}

	//XGenericWildcardTypeArgument returns XGenericType:
	//	{XGenericType} "?" ("extends" upperBound=XGenericType | "super" lowerBound=XGenericType)?;
	public XcoreGrammarAccess.XGenericWildcardTypeArgumentElements getXGenericWildcardTypeArgumentAccess() {
		return gaXcore.getXGenericWildcardTypeArgumentAccess();
	}
	
	public ParserRule getXGenericWildcardTypeArgumentRule() {
		return getXGenericWildcardTypeArgumentAccess().getRule();
	}

	//XQualifiedName:
	//	XID ("." XID)*;
	public XcoreGrammarAccess.XQualifiedNameElements getXQualifiedNameAccess() {
		return gaXcore.getXQualifiedNameAccess();
	}
	
	public ParserRule getXQualifiedNameRule() {
		return getXQualifiedNameAccess().getRule();
	}

	//XID:
	//	ID | "get" | "isSet" | "set" | "unset";
	public XcoreGrammarAccess.XIDElements getXIDAccess() {
		return gaXcore.getXIDAccess();
	}
	
	public ParserRule getXIDRule() {
		return getXIDAccess().getRule();
	}

	//ValidID:
	//	XID | "void";
	public XcoreGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXcore.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "abstract" | "annotation" | "as" | "class" | "container" | "contains" | "convert" | "create" | "derived" |
	//	"enum" | "extends" | "extension" | "id" | "import" | "keys" | "interface" | "local" | "op" | "opposite" | "package" |
	//	"readonly" | "refers" | "resolving" | "static" | "throws" | "transient" | "unique" | "unordered" | "unsettable" |
	//	"volatile" | "wraps";
	public XcoreGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXcore.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXcore.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXcore.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXcore.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXcore.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXcore.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXcore.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXcore.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXcore.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXcore.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXcore.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXcore.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXcore.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXcore.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXcore.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXcore.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXcore.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXcore.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXcore.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXcore.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXcore.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXcore.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXcore.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXcore.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXcore.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXcore.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXcore.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXcore.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXcore.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXcore.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXcore.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXcore.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXcore.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXcore.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXcore.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXcore.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXcore.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXcore.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXcore.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXcore.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXcore.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXcore.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXcore.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXcore.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXcore.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXcore.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXcore.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXcore.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXcore.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXcore.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXcore.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXcore.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXcore.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXcore.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXcore.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXcore.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXcore.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXcore.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXcore.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXcore.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXcore.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXcore.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXcore.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXcore.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXcore.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXcore.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXcore.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXcore.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXcore.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXcore.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXcore.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXcore.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXcore.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXcore.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXcore.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXcore.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXcore.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXcore.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXcore.getANY_OTHERRule();
	} 
}
